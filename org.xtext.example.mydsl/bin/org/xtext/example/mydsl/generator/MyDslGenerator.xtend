/*
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import iDM_Test.StateMachine
import iDM_Test.State
import iDM_Test.Transition
import org.eclipse.emf.common.util.EList

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MyDslGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		var stateMachine = resource.contents.get(0) as StateMachine
		fsa.generateFile("/stateMachine/StateMachine.java",stateMachine.createStateMachineClass)
		fsa.generateFile("/state/State.java",createStateClass)
		stateMachine.states.forEach[s | fsa.generateFile("/state/" + s.name.toFirstUpper +".java",s.createStateImplClass)]
		fsa.generateFile("/state/Transition.java",createTransitionClass)
	}
	
	def createStateMachineClass(StateMachine machine){
		'''
		package src.stateMachine;
		import src.state.*;
		
		public class «machine.name» {
			
			private State currentState;
			
			public «machine.name»(){
				this.currentState = new State();
			}
			
			public void switchState(State newState){
				this.currentState = newState;
			}
		}
		'''
	}
	
	
	def createTransitionClass() {
		'''
		package src.transition;
		
		public class Transition {
			private String name;
			private State to;
			private State from;
			
			public Transition(String name){
				this.name = name;
			}
		}
		'''
	}
	
	def createStateClass(){
		'''
		package src.state;
		
		public abstract class State {
			
			private List<Transition> outgoings;
			private List<Transition> incomings;
			
			public State(){
			}
			
			public boolean canGoTo(State s){
				if(outgoings.contains(s)){
					return true;
				}
				return false;
			}
		}
		'''
	}
	
	def createStateImplClass(State s){
		'''
		package src.state;
		
		public class «s.name.toFirstUpper» extends State {
			public «s.name.toFirstUpper»(){
				this.outgoings=«s.outgoing.toList»;
				this.incomings=«s.incomming.toList»;
			}
		}
		'''
	}
	
}
