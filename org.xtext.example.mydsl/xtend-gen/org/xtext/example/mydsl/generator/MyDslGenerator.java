/**
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.generator;

import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MyDslGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    throw new Error("Unresolved compilation problems:"
      + "\nStateMachine cannot be resolved to a type."
      + "\nThe method or field name is undefined for the type Object"
      + "\nThere is no context to infer the closure\'s argument types from. Consider typing the arguments or put the closures into a typed context."
      + "\nThe method createStateImplClass(State) from the type MyDslGenerator refers to the missing type State"
      + "\nname cannot be resolved"
      + "\ntoFirstUpper cannot be resolved"
      + "\n+ cannot be resolved"
      + "\ncreateStateMachineClass cannot be resolved"
      + "\nstates cannot be resolved"
      + "\nforEach cannot be resolved"
      + "\ntoFirstUpper cannot be resolved");
  }
  
  public CharSequence createStateMachineClass(final /* StateMachine */Object machine) {
    throw new Error("Unresolved compilation problems:"
      + "\nname cannot be resolved"
      + "\ntoFirstUpper cannot be resolved"
      + "\nname cannot be resolved"
      + "\ntoFirstUpper cannot be resolved");
  }
  
  public CharSequence createTransitionClass() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package src.transition;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class Transition {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private String name;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private State to;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private State from;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Transition(String name, State toState, State fromState){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.name = name;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.to = toState;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.from = fromState;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public State getTo(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return this.to;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public State getFrom(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return this.from;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence createStateClass() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package src.state;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public abstract class State {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private List<Transition> outgoings;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private List<Transition> incomings;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public State(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.outgoings = new ArrayList<Transition>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.incomings = new ArrayList<Transition>();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public boolean canGoTo(State s){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(outgoings.contains(s)){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void addOutgoing(State s){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.outgoings.add(s);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void addIncoming(State s){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.incomings.add(s);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public List<Transition> getIncomings(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return this.incomings;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public List<Transition> getOutgoings(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return this.outgoings");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence createStateImplClass(final /* State */Object s) {
    throw new Error("Unresolved compilation problems:"
      + "\nname cannot be resolved"
      + "\ntoFirstUpper cannot be resolved"
      + "\nname cannot be resolved"
      + "\ntoFirstUpper cannot be resolved"
      + "\noutgoing cannot be resolved"
      + "\nincomming cannot be resolved");
  }
}
