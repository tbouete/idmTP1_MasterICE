/*
 * generated by Xtext 2.12.0
 */
package iDM_Test.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import iDM_Test.StateMachine
import iDM_Test.State

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class StateMachineGenerator extends AbstractGenerator {
	
	var StateMachine stateMachine
	
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		this.stateMachine = resource.contents.get(0) as StateMachine
		fsa.generateFile("StateManager.java", stateManagerClass)
		fsa.generateFile(stateMachine.name.toFirstUpper() + ".java", stateMachineClass)
		fsa.generateFile("State.java", stateClass)
		fsa.generateFile("Transition.java", transitionClass)
	}
	
	def getStateMachineClass() {
		'''
		import State;
		import Transition;
		import java.util.ArrayList;
		import java.util.List;
		
		public class «stateMachine.name.toFirstUpper()» {
			
			private String name;
			private State initState;
			private List<State> stateList;
			private List<Transition> transitionList;
			
			public «stateMachine.name.toFirstUpper()»(State init) {
				this.name = «stateMachine.name.toFirstUpper()»;
				this.initState = init;
				this.stateList = new ArrayList<State>();
				this.transitionList = new ArrayList<Transition>();
			}
			
			public String getName(){
				return this.name;
			}
			
			public State getInitState(){
				return this.initState;
			}
			
			public List<State> getStateList(){
				return this.stateList;
			}
			
			public void addState(State newState){
				this.stateList.add(newState);
			}
			
			public List<Transition> getTransitionList(){
				return this.transitionList;
			}
			
			public void addtransition(Transition newTransition){
				this.transitionList.add(newTransition);
			}
		}
		'''
	}
	
	def stateClass() {
		'''
		package states;
		import Transition;
		import java.util.ArrayList;
		import java.util.List;
		
		public class State {
			
			private String name;
			private List<Transition> incoming;
			private List<Transition> outgoing;
			
			public State(String name){
				this.name = name;
				this.incomimng = new ArrayList<Transition>();
				this.outgoing =  new ArrayList<Transition>();
			}
			
			public String getName(){
				return this.name;
			}
			
			public List<Transition> getIncoming(){
				return this.incomimng;
			}
			
			public void addIncoming(Transition newIncoming) {
				this.incomimng.add(newIncoming);
			}
			
			public List<Transition> getOutgoing(){
				return this.outgoing;
			}
			
			public void addOutgoing(Transition newOutgoing) {
				this.outgoing.add(newOutgoing);
			}
		}
		'''
	}
	
	
	
	def transitionClass() {
		'''
		improt state.*
		import java.util.ArrayList;
		import java.util.List;
		
		public class Transition {
			
			private name;
			private List<State> from;
			private List<State> to;
			
			public Transition(String name){
				this.name = name;
				this.from = new ArrayList<State>();
				this.to =   new ArrayList<State>();
			}
			
			public String getName(){
				return this.name;
			}
			
			public List<Transition> getFrom(){
				return this.from;
			}
			
			public void addFrom(Transition newFrom) {
				this.from.add(newFrom);
			}
			
			public List<Transition> getTo(){
				return this.to;
			}
			
			public void addTo(Transition newTo) {
				this.to.add(newTo);
			}
		}
		'''
	}
	
	
	
	def stateManagerClass() {
		'''
		public static void main(String[] args){
			//create and add States
			//create and add Transitions
			//create StateMachine
			//runStateMachine()
		}
		'''
	}
}
