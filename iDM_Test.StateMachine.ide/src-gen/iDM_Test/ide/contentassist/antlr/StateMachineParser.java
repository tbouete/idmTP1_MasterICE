/*
 * generated by Xtext 2.12.0
 */
package iDM_Test.ide.contentassist.antlr;

import com.google.inject.Inject;
import iDM_Test.ide.contentassist.antlr.internal.InternalStateMachineParser;
import iDM_Test.services.StateMachineGrammarAccess;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class StateMachineParser extends AbstractContentAssistParser {

	@Inject
	private StateMachineGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalStateMachineParser createParser() {
		InternalStateMachineParser result = new InternalStateMachineParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getStateMachineAccess().getAlternatives(), "rule__StateMachine__Alternatives");
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getTransitionAccess().getAlternatives_0(), "rule__Transition__Alternatives_0");
					put(grammarAccess.getStateMachineAccess().getGroup_0(), "rule__StateMachine__Group_0__0");
					put(grammarAccess.getStateMachineAccess().getGroup_0_3(), "rule__StateMachine__Group_0_3__0");
					put(grammarAccess.getStateMachineAccess().getGroup_1(), "rule__StateMachine__Group_1__0");
					put(grammarAccess.getStateMachineAccess().getGroup_1_0(), "rule__StateMachine__Group_1_0__0");
					put(grammarAccess.getStateMachineAccess().getGroup_1_1(), "rule__StateMachine__Group_1_1__0");
					put(grammarAccess.getStateAccess().getGroup(), "rule__State__Group__0");
					put(grammarAccess.getTransitionAccess().getGroup(), "rule__Transition__Group__0");
					put(grammarAccess.getStateMachineAccess().getNameAssignment_0_2(), "rule__StateMachine__NameAssignment_0_2");
					put(grammarAccess.getStateMachineAccess().getStatesAssignment_0_3_1(), "rule__StateMachine__StatesAssignment_0_3_1");
					put(grammarAccess.getStateMachineAccess().getTransitionAssignment_1_0_1(), "rule__StateMachine__TransitionAssignment_1_0_1");
					put(grammarAccess.getStateMachineAccess().getInitAssignment_1_1_1(), "rule__StateMachine__InitAssignment_1_1_1");
					put(grammarAccess.getStateAccess().getNameAssignment_1(), "rule__State__NameAssignment_1");
					put(grammarAccess.getTransitionAccess().getFromAssignment_1(), "rule__Transition__FromAssignment_1");
					put(grammarAccess.getTransitionAccess().getToAssignment_3(), "rule__Transition__ToAssignment_3");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public StateMachineGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(StateMachineGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
