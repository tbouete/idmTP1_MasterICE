/*
 * generated by Xtext 2.12.0
 */
grammar InternalStateMachine;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package iDM_Test.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package iDM_Test.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import iDM_Test.services.StateMachineGrammarAccess;

}
@parser::members {
	private StateMachineGrammarAccess grammarAccess;

	public void setGrammarAccess(StateMachineGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleStateMachine
entryRuleStateMachine
:
{ before(grammarAccess.getStateMachineRule()); }
	 ruleStateMachine
{ after(grammarAccess.getStateMachineRule()); } 
	 EOF 
;

// Rule StateMachine
ruleStateMachine 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStateMachineAccess().getAlternatives()); }
		(rule__StateMachine__Alternatives)
		{ after(grammarAccess.getStateMachineAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEString
entryRuleEString
:
{ before(grammarAccess.getEStringRule()); }
	 ruleEString
{ after(grammarAccess.getEStringRule()); } 
	 EOF 
;

// Rule EString
ruleEString 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEStringAccess().getAlternatives()); }
		(rule__EString__Alternatives)
		{ after(grammarAccess.getEStringAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleState
entryRuleState
:
{ before(grammarAccess.getStateRule()); }
	 ruleState
{ after(grammarAccess.getStateRule()); } 
	 EOF 
;

// Rule State
ruleState 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStateAccess().getGroup()); }
		(rule__State__Group__0)
		{ after(grammarAccess.getStateAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTransition
entryRuleTransition
:
{ before(grammarAccess.getTransitionRule()); }
	 ruleTransition
{ after(grammarAccess.getTransitionRule()); } 
	 EOF 
;

// Rule Transition
ruleTransition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTransitionAccess().getGroup()); }
		(rule__Transition__Group__0)
		{ after(grammarAccess.getTransitionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StateMachine__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStateMachineAccess().getGroup_0()); }
		(rule__StateMachine__Group_0__0)
		{ after(grammarAccess.getStateMachineAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getStateMachineAccess().getGroup_1()); }
		(rule__StateMachine__Group_1__0)
		{ after(grammarAccess.getStateMachineAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EString__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
		RULE_ID
		{ after(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTransitionAccess().getOpenKeyword_0_0()); }
		'open'
		{ after(grammarAccess.getTransitionAccess().getOpenKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getTransitionAccess().getCloseKeyword_0_1()); }
		'close'
		{ after(grammarAccess.getTransitionAccess().getCloseKeyword_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StateMachine__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StateMachine__Group_0__0__Impl
	rule__StateMachine__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StateMachine__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateMachineAccess().getStateMachineAction_0_0()); }
	()
	{ after(grammarAccess.getStateMachineAccess().getStateMachineAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StateMachine__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StateMachine__Group_0__1__Impl
	rule__StateMachine__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StateMachine__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateMachineAccess().getStateMachineKeyword_0_1()); }
	'StateMachine'
	{ after(grammarAccess.getStateMachineAccess().getStateMachineKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StateMachine__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StateMachine__Group_0__2__Impl
	rule__StateMachine__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__StateMachine__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateMachineAccess().getNameAssignment_0_2()); }
	(rule__StateMachine__NameAssignment_0_2)
	{ after(grammarAccess.getStateMachineAccess().getNameAssignment_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StateMachine__Group_0__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StateMachine__Group_0__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StateMachine__Group_0__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateMachineAccess().getGroup_0_3()); }
	(rule__StateMachine__Group_0_3__0)
	{ after(grammarAccess.getStateMachineAccess().getGroup_0_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StateMachine__Group_0_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StateMachine__Group_0_3__0__Impl
	rule__StateMachine__Group_0_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StateMachine__Group_0_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateMachineAccess().getStateKeyword_0_3_0()); }
	'state'
	{ after(grammarAccess.getStateMachineAccess().getStateKeyword_0_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StateMachine__Group_0_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StateMachine__Group_0_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StateMachine__Group_0_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateMachineAccess().getStatesAssignment_0_3_1()); }
	(rule__StateMachine__StatesAssignment_0_3_1)
	{ after(grammarAccess.getStateMachineAccess().getStatesAssignment_0_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StateMachine__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StateMachine__Group_1__0__Impl
	rule__StateMachine__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StateMachine__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateMachineAccess().getGroup_1_0()); }
	(rule__StateMachine__Group_1_0__0)
	{ after(grammarAccess.getStateMachineAccess().getGroup_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StateMachine__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StateMachine__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StateMachine__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateMachineAccess().getGroup_1_1()); }
	(rule__StateMachine__Group_1_1__0)
	{ after(grammarAccess.getStateMachineAccess().getGroup_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StateMachine__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StateMachine__Group_1_0__0__Impl
	rule__StateMachine__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StateMachine__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateMachineAccess().getTransitionKeyword_1_0_0()); }
	'transition'
	{ after(grammarAccess.getStateMachineAccess().getTransitionKeyword_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StateMachine__Group_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StateMachine__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StateMachine__Group_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateMachineAccess().getTransitionAssignment_1_0_1()); }
	(rule__StateMachine__TransitionAssignment_1_0_1)
	{ after(grammarAccess.getStateMachineAccess().getTransitionAssignment_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StateMachine__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StateMachine__Group_1_1__0__Impl
	rule__StateMachine__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StateMachine__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateMachineAccess().getInitKeyword_1_1_0()); }
	'init'
	{ after(grammarAccess.getStateMachineAccess().getInitKeyword_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StateMachine__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StateMachine__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StateMachine__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateMachineAccess().getInitAssignment_1_1_1()); }
	(rule__StateMachine__InitAssignment_1_1_1)
	{ after(grammarAccess.getStateMachineAccess().getInitAssignment_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__State__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__State__Group__0__Impl
	rule__State__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateAccess().getStateAction_0()); }
	()
	{ after(grammarAccess.getStateAccess().getStateAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__State__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateAccess().getNameAssignment_1()); }
	(rule__State__NameAssignment_1)
	{ after(grammarAccess.getStateAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Transition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Transition__Group__0__Impl
	rule__Transition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTransitionAccess().getAlternatives_0()); }
	(rule__Transition__Alternatives_0)
	{ after(grammarAccess.getTransitionAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Transition__Group__1__Impl
	rule__Transition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTransitionAccess().getFromAssignment_1()); }
	(rule__Transition__FromAssignment_1)
	{ after(grammarAccess.getTransitionAccess().getFromAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Transition__Group__2__Impl
	rule__Transition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTransitionAccess().getHyphenMinusGreaterThanSignKeyword_2()); }
	'->'
	{ after(grammarAccess.getTransitionAccess().getHyphenMinusGreaterThanSignKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Transition__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTransitionAccess().getToAssignment_3()); }
	(rule__Transition__ToAssignment_3)
	{ after(grammarAccess.getTransitionAccess().getToAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StateMachine__NameAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStateMachineAccess().getNameEStringParserRuleCall_0_2_0()); }
		ruleEString
		{ after(grammarAccess.getStateMachineAccess().getNameEStringParserRuleCall_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StateMachine__StatesAssignment_0_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStateMachineAccess().getStatesStateParserRuleCall_0_3_1_0()); }
		ruleState
		{ after(grammarAccess.getStateMachineAccess().getStatesStateParserRuleCall_0_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StateMachine__TransitionAssignment_1_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStateMachineAccess().getTransitionTransitionParserRuleCall_1_0_1_0()); }
		ruleTransition
		{ after(grammarAccess.getStateMachineAccess().getTransitionTransitionParserRuleCall_1_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StateMachine__InitAssignment_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStateMachineAccess().getInitStateParserRuleCall_1_1_1_0()); }
		ruleState
		{ after(grammarAccess.getStateMachineAccess().getInitStateParserRuleCall_1_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__State__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStateAccess().getNameEStringParserRuleCall_1_0()); }
		ruleEString
		{ after(grammarAccess.getStateAccess().getNameEStringParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__FromAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTransitionAccess().getFromStateCrossReference_1_0()); }
		(
			{ before(grammarAccess.getTransitionAccess().getFromStateEStringParserRuleCall_1_0_1()); }
			ruleEString
			{ after(grammarAccess.getTransitionAccess().getFromStateEStringParserRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getTransitionAccess().getFromStateCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__ToAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTransitionAccess().getToStateCrossReference_3_0()); }
		(
			{ before(grammarAccess.getTransitionAccess().getToStateEStringParserRuleCall_3_0_1()); }
			ruleEString
			{ after(grammarAccess.getTransitionAccess().getToStateEStringParserRuleCall_3_0_1()); }
		)
		{ after(grammarAccess.getTransitionAccess().getToStateCrossReference_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
